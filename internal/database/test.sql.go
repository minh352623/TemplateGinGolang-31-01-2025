// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: test.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTest = `-- name: CreateTest :one
INSERT INTO test (id, name, user_id, balance) VALUES ($1, $2, $3, $4) RETURNING id, name, user_id, balance
`

type CreateTestParams struct {
	ID      uuid.UUID
	Name    string
	UserID  uuid.NullUUID
	Balance sql.NullString
}

func (q *Queries) CreateTest(ctx context.Context, arg CreateTestParams) (Test, error) {
	row := q.db.QueryRowContext(ctx, createTest,
		arg.ID,
		arg.Name,
		arg.UserID,
		arg.Balance,
	)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Balance,
	)
	return i, err
}

const deleteTest = `-- name: DeleteTest :one
DELETE FROM test WHERE id = $1 RETURNING id, name, user_id, balance
`

func (q *Queries) DeleteTest(ctx context.Context, id uuid.UUID) (Test, error) {
	row := q.db.QueryRowContext(ctx, deleteTest, id)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Balance,
	)
	return i, err
}

const getAllTestPaginationAndSearch = `-- name: GetAllTestPaginationAndSearch :many
SELECT id, name, user_id, balance FROM test
WHERE name ILIKE '%' || $1 || '%' AND id = $2
ORDER BY id
LIMIT $3 OFFSET $4
`

type GetAllTestPaginationAndSearchParams struct {
	Column1 sql.NullString
	ID      uuid.UUID
	Limit   int32
	Offset  int32
}

func (q *Queries) GetAllTestPaginationAndSearch(ctx context.Context, arg GetAllTestPaginationAndSearchParams) ([]Test, error) {
	rows, err := q.db.QueryContext(ctx, getAllTestPaginationAndSearch,
		arg.Column1,
		arg.ID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Test
	for rows.Next() {
		var i Test
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTestById = `-- name: GetTestById :one
SELECT id, name, user_id, balance FROM test WHERE id = $1
`

func (q *Queries) GetTestById(ctx context.Context, id uuid.UUID) (Test, error) {
	row := q.db.QueryRowContext(ctx, getTestById, id)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Balance,
	)
	return i, err
}

const updateTest = `-- name: UpdateTest :one
UPDATE test SET name = $2, balance = $3 WHERE id = $1 RETURNING id, name, user_id, balance
`

type UpdateTestParams struct {
	ID      uuid.UUID
	Name    string
	Balance sql.NullString
}

func (q *Queries) UpdateTest(ctx context.Context, arg UpdateTestParams) (Test, error) {
	row := q.db.QueryRowContext(ctx, updateTest, arg.ID, arg.Name, arg.Balance)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Balance,
	)
	return i, err
}
